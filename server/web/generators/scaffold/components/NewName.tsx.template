import { navigate, routes } from '@redwoodjs/router';
import { useMutation } from '@redwoodjs/web';
import { toast } from '@redwoodjs/web/toast';

import ModelDataWrapper from 'src/components/ModelDataWrapper/ModelDataWrapper';
import ${singularPascalName}Form from '${importComponentNameForm}';

const CREATE_${singularConstantName}_MUTATION = gql`
  mutation Create${singularPascalName}Mutation($input: Create${singularPascalName}Input!) {
    create${singularPascalName}(input: $input) {
      id
    }
  }
`;

export default function New${singularPascalName}() {
  const [create${singularPascalName}, { loading, error }] = useMutation(
    CREATE_${singularConstantName}_MUTATION, {
      onCompleted: () => {
        toast.success('${singularPascalName} created');
        navigate(routes.${pluralRouteName}());
      },
      onError: (error) => {
        toast.error(error.message);
      },
    },
  );

  const onSave = (input) => {
    <% if (intForeignKeys.length) { %>
    const castInput = Object.assign(input, {
      <% intForeignKeys.forEach(key => { %>
      ${key}: parseInt(input.${key}),
      <% }) %>
    });
    <% } %>
    create${singularPascalName}({
      variables: {
        <% if (intForeignKeys.length) { %>
        input: castInput,
        <% } else { %>
        input,
        <% } %>
      },
    });
  };

  return (
    <ModelDataWrapper
      title="New ${singularPascalName}"
      subtitle="Enter new ${singularCamelName} information"
    >
      <${singularPascalName}Form onSave={onSave} loading={loading} error={error} />
    </ModelDataWrapper>
  );
}
